<?xml version="1.0" encoding="UTF-8"?>
<infinispan
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="urn:infinispan:config:15.0 http://www.infinispan.org/schemas/infinispan-config-15.0.xsd"
        xmlns="urn:infinispan:config:15.0">

    <!-- ðŸ”¹ JGroups for Cluster Communication (Using JDBC_PING for discovery) -->
    <jgroups>
        <stack name="postgres-jdbc-ping-tcp" extends="tcp">
            <TCP external_addr="172.18.99.234" />
            <JDBC_PING connection_driver="org.postgresql.Driver"
                       connection_username="${env.KC_DB_USERNAME}"
                       connection_password="${env.KC_DB_PASSWORD}"
                       connection_url="${env.KC_DB_URL}"
                       initialize_sql="CREATE SCHEMA IF NOT EXISTS public;
                                      CREATE TABLE IF NOT EXISTS public.JGROUPSPING (
                                          own_addr VARCHAR(200) NOT NULL,
                                          cluster_name VARCHAR(200) NOT NULL,
                                          bind_addr VARCHAR(200) NOT NULL,
                                          updated TIMESTAMP DEFAULT current_timestamp,
                                          ping_data BYTEA,
                                          CONSTRAINT PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name)
                                      )"
                       insert_single_sql="INSERT INTO public.JGROUPSPING (own_addr, cluster_name, bind_addr, updated, ping_data)
                                          VALUES (?, ?, '${env.JGROUPS_DISCOVERY_EXTERNAL_IP}', NOW(), ?)"
                       delete_single_sql="DELETE FROM public.JGROUPSPING WHERE own_addr=? AND cluster_name=?"
                       select_all_pingdata_sql="SELECT ping_data, own_addr, cluster_name FROM public.JGROUPSPING WHERE cluster_name=?"
                       clear_sql="DELETE FROM public.JGROUPSPING WHERE cluster_name=?"
                       info_writer_sleep_time="500"
                       remove_all_data_on_view_change="true"
                       stack.combine="REPLACE"
                       stack.position="MPING" />
        </stack>
    </jgroups>

    <cache-container name="keycloak">
        <!-- ðŸ”¹ Enable Cluster Communication with JDBC_PING -->
        <transport lock-timeout="60000" stack="postgres-jdbc-ping-tcp"/>

        <!-- ðŸ”¹ Enable Metrics for Monitoring -->
        <metrics names-as-tags="true" />

        <!-- ðŸ”¹ Cache for Realms (Local, no replication needed) -->
        <local-cache name="realms" >
            <encoding>
                <key media-type="application/x-java-object"/>
                <value media-type="application/x-java-object"/>
            </encoding>
            <memory max-count="10000"/>
        </local-cache>

        <!-- ðŸ”¹ Cache for Users (Local, no replication needed) -->
        <local-cache name="users" >
            <encoding>
                <key media-type="application/x-java-object"/>
                <value media-type="application/x-java-object"/>
            </encoding>
            <memory max-count="10000"/>
        </local-cache>

        <!-- ðŸ”¹ Session Caches (Distributed for HA) -->
        <distributed-cache name="sessions" owners="2">
            <expiration lifespan="-1"/>
            <memory max-count="20000"/>
        </distributed-cache>

        <distributed-cache name="authenticationSessions" owners="2">
            <expiration lifespan="-1"/>
        </distributed-cache>

        <distributed-cache name="offlineSessions" owners="2">
            <expiration lifespan="-1"/>
            <memory max-count="10000"/>
        </distributed-cache>

        <distributed-cache name="clientSessions" owners="2">
            <expiration lifespan="-1"/>
            <memory max-count="10000"/>
        </distributed-cache>

        <distributed-cache name="offlineClientSessions" owners="2">
            <expiration lifespan="-1"/>
            <memory max-count="10000"/>
        </distributed-cache>

        <!-- ðŸ”¹ Login Failures (Distributed for consistency) -->
        <distributed-cache name="loginFailures" owners="2">
            <expiration lifespan="-1"/>
        </distributed-cache>

        <!-- ðŸ”¹ Authorization Cache (Local) -->
        <distributed-cache owners="2" name="authorization" >
            <encoding>
                <key media-type="application/x-java-object"/>
                <value media-type="application/x-java-object"/>
            </encoding>
            <memory max-count="10000"/>
        </distributed-cache>

        <!-- ðŸ”¹ Work Cache (Replicated) -->
        <replicated-cache name="work">
            <expiration lifespan="-1"/>
        </replicated-cache>

        <!-- ðŸ”¹ ðŸ”‘ Key Cache (Distributed to ensure JWT signature consistency) -->
        <distributed-cache name="keys" owners="2">
            <encoding>
                <key media-type="application/x-java-object"/>
                <value media-type="application/x-java-object"/>
            </encoding>
            <expiration max-idle="3600000"/>
            <memory max-count="1000"/>
        </distributed-cache>

        <!-- ðŸ”¹ Action Tokens (Distributed) -->
        <distributed-cache name="actionTokens" owners="2">
            <encoding>
                <key media-type="application/x-java-object"/>
                <value media-type="application/x-java-object"/>
            </encoding>
            <expiration max-idle="-1" lifespan="-1" interval="300000"/>
            <memory max-count="-1"/>
        </distributed-cache>
    </cache-container>
</infinispan>
